{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/NotificationMessage/NotificationMessage.jsx","App.js","reportWebVitals.js","index.js","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Section","title","children","className","s","section","FeedbackOptions","options","onFeedback","map","option","type","data-action","onClick","button","Statistics","good","neutral","bad","total","positivePercentage","NotificationMessage","message","App","useState","setGood","setNeutral","setBad","onTotalFeedback","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAeeA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAWC,IAAEC,QAAlB,UACE,6BAAKJ,IACJC,M,gBCkBUI,MApBf,YAAmD,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SACLC,cAAaL,EAEbM,QAAS,kBAAML,EAAWE,IAE1BP,UAAWC,IAAEU,OANf,SAQGJ,GAHIA,OCSIK,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,oDAAuBC,EAAvB,WCEWC,MARf,YAA2C,IAAZC,EAAW,EAAXA,QAC7B,OAAO,4BAAIA,KCgFEC,MA7Ef,WAAe,MAOWC,mBAAS,GAPpB,mBAONR,EAPM,KAOAS,EAPA,OAQiBD,mBAAS,GAR1B,mBAQNP,EARM,KAQGS,EARH,OASSF,mBAAS,GATlB,mBASNN,EATM,KASDS,EATC,KAsCPC,EAAkB,WAEtB,OAAOZ,EAAOC,EAAUC,GAW1B,OACE,qCACE,cAAC,EAAD,CAASjB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QArCQ,CAAC,OAAQ,UAAW,OAsC5BC,WApCkB,SAAAE,GACxB,OAAQA,GACN,IAAK,OACHe,EAAQT,EAAO,GACf,MAEF,IAAK,UACHU,EAAWT,EAAU,GACrB,MAEF,IAAK,MACHU,EAAOT,EAAM,GACb,MAEF,QACE,aAwBF,cAAC,EAAD,CAASjB,MAAM,aAAf,SACG2B,IACC,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAtBDQ,IAAoBC,KAAKC,MAAOd,EAAOY,IAAqB,KAAO,IAyBpE,cAAC,EAAD,CAAcN,QAAQ,4BC/DjBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,2B,kBCA5BD,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.abfb7b20.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={s.section}>\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ options, onFeedback }) {\n  return options.map(option => (\n    <button\n      type=\"button\"\n      data-action={options}\n      // onClick={onFeedback}\n      onClick={() => onFeedback(option)}\n      key={option}\n      className={s.button}\n    >\n      {option}\n    </button>\n  ));\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <p>Good : {good}</p>\n    <p>Neutral : {neutral}</p>\n    <p>Bad : {bad}</p>\n    <p>Total : {total}</p>\n    <p>Positive Feedback: {positivePercentage}%</p>\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nfunction NotificationMessage({ message }) {\n  return <p>{message}</p>;\n}\n\nNotificationMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default NotificationMessage;\n","import React, { useState } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/NotificationMessage';\n\nfunction App() {\n  // state = {\n  //   good: 0,\n  //   neutral: 0,\n  //   bad: 0,\n  // };\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  // onFeedbackRefresh = ({ target }) => {\n  //   const type = target.dataset.action;\n  //   this.setState(prevState => {\n  //     return { [type]: prevState[type] + 1 };\n  //   });\n  // };\n\n  const options = ['good', 'neutral', 'bad'];\n\n  const onFeedbackRefresh = option => {\n    switch (option) {\n      case 'good':\n        setGood(good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const onTotalFeedback = () => {\n    // const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  const onPositive = () => {\n    return onTotalFeedback() ? Math.round((good / onTotalFeedback()) * 100) : 0;\n  };\n\n  // render() {\n  //   const { good, neutral, bad } = this.state;\n  // const options = ['good', 'neutral', 'bad'];\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onFeedback={onFeedbackRefresh}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {onTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={onTotalFeedback()}\n            positivePercentage={onPositive()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </Section>\n    </>\n  );\n  // }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2CMlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1T85V\"};"],"sourceRoot":""}